"""Malware scanning heuristics for uploaded game builds."""

from __future__ import annotations

from dataclasses import dataclass
from functools import lru_cache
from typing import Iterable, Sequence

from bit_indie_api.core.config import get_settings
from bit_indie_api.db.models import BuildScanStatus


@dataclass(frozen=True)
class BuildScanResult:
    """Result of a malware scan including status and explanatory message."""

    status: BuildScanStatus
    message: str | None = None


class MalwareScannerService:
    """Perform lightweight checks to flag suspicious or unsafe game builds."""

    def __init__(
        self,
        *,
        allowed_extensions: Sequence[str] | None = None,
        blocked_extensions: Sequence[str] | None = None,
        known_bad_hashes: Iterable[str] | None = None,
        max_size_bytes: int | None = None,
    ) -> None:
        settings = get_settings()
        self._allowed_extensions = tuple(
            ext.lower() for ext in (allowed_extensions or (".zip", ".tar.gz", ".tar.xz", ".tar.bz2"))
        )
        self._blocked_extensions = tuple(
            ext.lower()
            for ext in (
                blocked_extensions
                or (
                    ".exe",
                    ".msi",
                    ".bat",
                    ".cmd",
                    ".ps1",
                    ".sh",
                    ".js",
                    ".vbs",
                )
            )
        )
        self._known_bad_hashes = {value.lower() for value in (known_bad_hashes or set())}
        self._max_size_bytes = max_size_bytes or settings.max_build_size_bytes

    def scan(
        self,
        *,
        object_key: str,
        size_bytes: int,
        checksum_sha256: str,
    ) -> BuildScanResult:
        """Inspect metadata describing a build upload and return a scan result."""

        normalized_key = object_key.strip()
        if "../" in normalized_key or normalized_key.startswith("../"):
            return BuildScanResult(
                status=BuildScanStatus.FAILED,
                message="Build key contains an invalid path traversal sequence.",
            )

        key_lower = normalized_key.lower()
        if any(key_lower.endswith(ext) for ext in self._blocked_extensions):
            return BuildScanResult(
                status=BuildScanStatus.INFECTED,
                message="Executable files are not allowed in game submissions.",
            )

        if not any(key_lower.endswith(ext) for ext in self._allowed_extensions):
            allowed_display = ", ".join(self._allowed_extensions)
            return BuildScanResult(
                status=BuildScanStatus.FAILED,
                message=f"Unsupported archive format. Allowed extensions: {allowed_display}.",
            )

        if size_bytes <= 0:
            return BuildScanResult(
                status=BuildScanStatus.FAILED,
                message="Reported build size must be greater than zero.",
            )

        if size_bytes > self._max_size_bytes:
            return BuildScanResult(
                status=BuildScanStatus.FAILED,
                message="Build exceeds the maximum allowed size.",
            )

        normalized_checksum = checksum_sha256.strip().lower()
        if len(normalized_checksum) != 64 or any(
            char not in "0123456789abcdef" for char in normalized_checksum
        ):
            return BuildScanResult(
                status=BuildScanStatus.FAILED,
                message="Checksum must be a 64 character hexadecimal string.",
            )

        if normalized_checksum in self._known_bad_hashes:
            return BuildScanResult(
                status=BuildScanStatus.INFECTED,
                message="Build matches a known malicious signature.",
            )

        return BuildScanResult(status=BuildScanStatus.CLEAN, message="No malware detected in build metadata.")


@lru_cache(maxsize=1)
def get_malware_scanner() -> MalwareScannerService:
    """Return a cached malware scanner configured from application settings."""

    return MalwareScannerService()


def reset_malware_scanner() -> None:
    """Clear the cached malware scanner instance. Intended for tests."""

    get_malware_scanner.cache_clear()


__all__ = [
    "BuildScanResult",
    "BuildScanStatus",
    "MalwareScannerService",
    "get_malware_scanner",
    "reset_malware_scanner",
]
